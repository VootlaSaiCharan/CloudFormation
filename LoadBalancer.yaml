AWSTemplateFormatVersion: '2010-09-09'
Description: Simple ALB with 3 EC2 instances (manual), in a custom VPC

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to SSH
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  # --- VPC and Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SimpleVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-south-1a
      # AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-south-1b
      # AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true

  SubnetARouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable

  SubnetBRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PublicRouteTable

  # --- Security Groups ---
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Replace with your IP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443 # HTTPs
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # ALBSG:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Allow HTTP inbound
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0

  # --- IAM Role for EC2 Instances ---
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: "arn:aws:s3:::11apr.aws"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::11apr.aws/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # --- EC2 Instances ---
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      # ImageId: ami-0e449927258d45bc4
      ImageId: ami-0f1dcc636b69a6438 # AP-South-1 Amazon Linux 2 AMI
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - !Ref InstanceSG
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: Server1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          # aws s3 sync s3://11apr.aws /var/www/html/
          echo "<h1>Hello all from $(hostname -I)AP-South-1</h1>" > /var/www/html/index.html

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      # ImageId: ami-0e449927258d45bc4
      ImageId: ami-0f1dcc636b69a6438 # AP-South-1 Amazon Linux 2 AMI
      SubnetId: !Ref SubnetB
      SecurityGroupIds:
        - !Ref InstanceSG
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: Server2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          # aws s3 sync s3://11apr.aws /var/www/html/
          echo "<h1>Hello all from $(hostname -I)AP-South-1</h1>" > /var/www/html/index.html

  EC2Instance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      # ImageId: ami-0e449927258d45bc4
      ImageId: ami-0f1dcc636b69a6438 # AP-South-1 Amazon Linux 2 AMI
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - !Ref InstanceSG
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: Server3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          # aws s3 sync s3://11apr.aws /var/www/html/
          echo "<h1>Hello all from $(hostname -I)AP-South-1</h1>" > /var/www/html/index.html

  # --- Load Balancer ---
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SimpleALB
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref InstanceSG

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2
        - Id: !Ref EC2Instance3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  ALBEndpoint:
    Description: ALB DNS Name
    Value: !GetAtt ALB.DNSName

  EC2Instance1PublicIP:
    Description: Public IP of EC2 Instance 1
    Value: !GetAtt EC2Instance1.PublicIp

  EC2Instance2PublicIP:
    Description: Public IP of EC2 Instance 2
    Value: !GetAtt EC2Instance2.PublicIp

  EC2Instance3PublicIP:
    Description: Public IP of EC2 Instance 3
    Value: !GetAtt EC2Instance3.PublicIp